import streamlit as st
import plotly.express as px
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


st.set_page_config(page_title="Dashboard de Tr√°fico NAPs", layout="wide")
st.title("üìà Dashboard de Tr√°fico de Internet en Colombia")

# Cargar datos
@st.cache_data
def cargar_datos():
    df = pd.read_csv("Monitoreo de Tr√°fico de Internet - Trafico Diario_133 - Monitoreo de Tr√°fico de Internet - Trafico Diario_133.csv",
                     sep=',', encoding='latin1')
  
    mapping = {
        'Mes de tr√É¬°fico': 'Mes de trafico',
        'Tr√É¬°fico Datos: Internacional (GB)': 'Tr√°fico Datos: Internacional (GB)',
        'Tr√É¬°fico Datos:  NAPs - Colombia (GB)': 'Tr√°fico Datos: NAPs - Colombia (GB)',
        'Tr√É¬°fico Datos: Acuerdos de tr√É¬°nsito o peering directo (GB)': 'Tr√°fico Datos: Acuerdos de tr√°nsito o peering directo (GB)',
        'Tr√É¬°fico Datos: Local (GB)': 'Tr√°fico Datos: Local (GB)',
        'Tr√É¬°fico Datos: Total Mes (GB)': 'Trafico Datos: Total Mes (GB)'
    }
    df.rename(columns=mapping, inplace=True)

    df.columns = (
        df.columns
        .str.strip()
        .str.lower()
        .str.replace('√°', 'a')
        .str.replace('√©', 'e')
    )

    cols = [
        'trafico datos: internacional (gb)',
        'trafico datos: naps - colombia (gb)',
        'trafico datos: acuerdos de transito o peering directo (gb)',
        'trafico datos: local (gb)'
    ]

    df[cols] = (
        df[cols]
        .astype(str)
        .replace(r'\.', '', regex=True)
        .replace(',', '.', regex=True)
        .replace('', pd.NA)
        .astype('float64')
    )

    df.drop(columns=['trafico datos: total mes (gb)'], inplace=True)

    df['mes de trafico'] = pd.to_datetime(df['mes de trafico'], format='%d/%m/%Y', dayfirst=True)
    df['a√±o'] = df['mes de trafico'].dt.year
    df['mes'] = df['mes de trafico'].dt.month
    df['dia'] = df['mes de trafico'].dt.day
    return df

df = cargar_datos()

# Barra lateral de navegaci√≥n
st.sidebar.title("üìä Navegaci√≥n del dashboard")
opcion = st.sidebar.radio("Selecciona una visualizaci√≥n:", (
    "Volumen NAPs por A√±o",
    "NAPs por Proveedor",
    "Tr√°fico Local",
    "Tr√°fico Internacional",
    "Tr√°fico por Peering",
    "Predicci√≥n de Septiembre 2021"
))


# Funci√≥n para formatear valores
def formatear_valor(v):
    return f"{v/1e9:.1f}B" if v >= 1e9 else f"{v/1e6:.1f}M"

# Visualizaci√≥n condicional
if opcion == "Volumen NAPs por A√±o":
    resumen = (
        df.groupby(['a√±o'], as_index=False)['trafico datos: naps - colombia (gb)']
        .sum()
        .rename(columns={'trafico datos: naps - colombia (gb)': 'total_naps_gb'})
    )
    a√±os_disponibles = resumen['a√±o'].unique()
    a√±os_seleccionados = st.sidebar.multiselect("Filtrar por a√±o", a√±os_disponibles, default=a√±os_disponibles)
    resumen = resumen[resumen['a√±o'].isin(a√±os_seleccionados)]

    fig = px.bar(
        resumen, x='a√±o', y='total_naps_gb', text='total_naps_gb',
        title='üì∂ Volumen anual de tr√°fico NAPs ‚Äì Colombia',
        labels={'a√±o': 'A√±o', 'total_naps_gb': 'Tr√°fico NAPs (GB)'},
        color='total_naps_gb', color_continuous_scale='Blues'
    )
    fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, plot_bgcolor='white')
    st.plotly_chart(fig, use_container_width=True, key="nap_anual")

elif opcion == "NAPs por Proveedor":
    resumen = (
        df.groupby(['proveedor'], as_index=False)['trafico datos: naps - colombia (gb)']
        .sum().rename(columns={'trafico datos: naps - colombia (gb)': 'total_naps_gb'})
    ).sort_values(by='total_naps_gb', ascending=False)
    resumen['text'] = resumen['total_naps_gb'].apply(formatear_valor)
    fig = px.bar(
        resumen, x='proveedor', y='total_naps_gb', text='text',
        title='üì° Volumen de tr√°fico NAPs por proveedor',
        labels={'proveedor': 'Proveedor', 'total_naps_gb': 'Tr√°fico NAPs (GB)'},
        color='total_naps_gb', color_continuous_scale='Blues'
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, plot_bgcolor='white')
    st.plotly_chart(fig, use_container_width=True, key="nap_proveedor")

elif opcion == "Tr√°fico Local":
    resumen = (
        df.groupby(['proveedor'], as_index=False)['trafico datos: local (gb)']
        .sum().rename(columns={'trafico datos: local (gb)': 'trafico_local'})
    ).sort_values(by='trafico_local', ascending=False)
    resumen['text'] = resumen['trafico_local'].apply(formatear_valor)
    fig = px.bar(
        resumen, x='proveedor', y='trafico_local', text='text',
        title='üì° Volumen de tr√°fico local por proveedor',
        labels={'proveedor': 'Proveedor', 'trafico_local': 'Tr√°fico Local (GB)'},
        color='trafico_local', color_continuous_scale='Blues'
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, plot_bgcolor='white')
    st.plotly_chart(fig, use_container_width=True, key="local")

elif opcion == "Tr√°fico Internacional":
    resumen = (
        df.groupby(['proveedor'], as_index=False)['trafico datos: internacional (gb)']
        .sum().rename(columns={'trafico datos: internacional (gb)': 'trafico_internacional'})
    ).sort_values(by='trafico_internacional', ascending=False)
    resumen['text'] = resumen['trafico_internacional'].apply(formatear_valor)
    fig = px.bar(
        resumen, x='proveedor', y='trafico_internacional', text='text',
        title='üåê Volumen de tr√°fico internacional por proveedor',
        labels={'proveedor': 'Proveedor', 'trafico_internacional': 'Tr√°fico Internacional (GB)'},
        color='trafico_internacional', color_continuous_scale='Blues'
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, plot_bgcolor='white')
    st.plotly_chart(fig, use_container_width=True, key="internacional")


elif opcion == "Tr√°fico por Peering":
    resumen = (
        df.groupby(['proveedor'], as_index=False)['trafico datos: acuerdos de transito o peering directo (gb)']
        .sum().rename(columns={'trafico datos: acuerdos de transito o peering directo (gb)': 'trafico_peering'})
    ).sort_values(by='trafico_peering', ascending=False)
    resumen['text'] = resumen['trafico_peering'].apply(formatear_valor)
    fig = px.bar(
        resumen, x='proveedor', y='trafico_peering', text='text',
        title='üîÑ Volumen de tr√°fico por acuerdos de tr√°nsito o peering',
        labels={'proveedor': 'Proveedor', 'trafico_peering': 'Tr√°fico Peering (GB)'},
        color='trafico_peering', color_continuous_scale='Blues'
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, plot_bgcolor='white')
    st.plotly_chart(fig, use_container_width=True, key="peering")


elif opcion == "Predicci√≥n de Septiembre 2021":
    st.header("üîÆ Predicci√≥n del consumo de datos - Septiembre 2021")

    # Columnas que vamos a sumar
    trafico_columnas = [
        'trafico datos: internacional (gb)',
        'trafico datos: naps - colombia (gb)',
        'trafico datos: acuerdos de transito o peering directo (gb)',
        'trafico datos: local (gb)'
    ]

    # Filtrar y agrupar por a√±o y mes
    df_2020 = df[df['a√±o'] == 2020]
    df_2021 = df[df['a√±o'] == 2021]

    meses_2020 = df_2020.groupby('mes', as_index=False)[trafico_columnas].sum()
    meses_2021 = df_2021.groupby('mes', as_index=False)[trafico_columnas].sum()

    # Agregar columna a√±o
    meses_2020["a√±o"] = 2020
    meses_2021["a√±o"] = 2021

    # Sumar columnas de tr√°fico total por mes
    meses_2020["Suma_mensual_total"] = meses_2020[trafico_columnas].sum(axis=1)
    meses_2021["Suma_mensual_total"] = meses_2021[trafico_columnas].sum(axis=1)

    # Agregar nombre del mes
    nombres_meses = {1:"Ene",2:"Feb",3:"Mar",4:"Abr",5:"May",6:"Jun",7:"Jul",8:"Ago",9:"Sep",10:"Oct",11:"Nov",12:"Dic"}
    meses_2020["nombre_mes"] = meses_2020["mes"].map(nombres_meses)
    meses_2021["nombre_mes"] = meses_2021["mes"].map(nombres_meses)

    # Unir ambos a√±os
    meses_todos = pd.concat([meses_2020, meses_2021], ignore_index=True)
    meses_todos = meses_todos.sort_values(['a√±o', 'mes']).reset_index(drop=True)
    meses_todos['t'] = range(1, len(meses_todos) + 1)

    # Separar datos
    # Eliminar octubre 2021 si existe
    meses_todos_filtrado = meses_todos[~((meses_todos['a√±o'] == 2021) & (meses_todos['mes'] == 10))]

    # Asignar train y test
    train = meses_todos_filtrado.iloc[:-1].copy()
    test = meses_todos_filtrado.iloc[-1:].copy()



    from sklearn.linear_model import LinearRegression
    import matplotlib.pyplot as plt
    import numpy as np

    X_train = train['t'].values.reshape(-1, 1)
    y_train = train['Suma_mensual_total'].values

    model = LinearRegression()
    model.fit(X_train, y_train)

    t_test = np.array([[len(X_train)]])
    y_pred = model.predict(t_test)[0]
    y_true = test["Suma_mensual_total"].values[0]
    mes, a√±o = test['nombre_mes'].iloc[0], test['a√±o'].iloc[0]

    # Mostrar qu√© mes se va a predecir
    st.markdown(f"üìå Mes predicho: **{test['nombre_mes'].iloc[0]} {test['a√±o'].iloc[0]}**")

    st.markdown(f"üìÖ **Predicci√≥n para {mes} {a√±o}:** `{y_pred:.3e}` GB")
    st.markdown(f"üìä **Valor real para {mes} {a√±o}:** `{y_true:.3e}` GB")
    st.markdown(f"‚ùó **Error:** `{(y_pred - y_true):.3e}` GB (`{(y_pred - y_true)/y_true*100:.1f}%`)")


    # Gr√°fico
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.plot(train['t'], train['Suma_mensual_total'], marker='o', linestyle='-', color='C0', label='Hist√≥rico')
    ax.scatter(t_test, y_true, color='green', s=100, label=f'Real: {mes} {a√±o}')
    ax.scatter(t_test, y_pred, color='red', s=100, label=f'Predicci√≥n: {mes} {a√±o}')
    ax.legend()
    ax.set_xlabel('Mes')
    ax.set_ylabel('Uso total de datos (GB)')
    ax.set_title('üìà Consumo mensual: hist√≥rico vs predicci√≥n')
    ticks = list(train['t']) + [t_test[0][0]]
    labels = list(train['nombre_mes'] + ' ' + train['a√±o'].astype(str)) + [f'{mes} {a√±o}']
    ax.set_xticks(ticks)
    ax.set_xticklabels(labels, rotation=45)
    st.pyplot(fig)






